openapi: 3.0.0
info:
  title: oplog.se API
  description: This is the API for oplog.se
  version: 1.0.0
servers:
  - url: https://oplog.se/api/v1
paths:
  /login:
    post:
      summary: Login
      description: This is to authenticate the user. If successful it returns a cookie
        to be used in subsequent requests
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
        required: true
      responses:
        '200':
          description: If authentication is successful. Returns a cookie with an empty
            response body
        '401':
          description: If authentication fails
  /logout:
    post:
      summary: Logout
      description: This is to logout the user and clear the session. Empty request body
      operationId: logout
      security:
        - cookieAuthentication: []
      responses:
        '200':
          description: If logout is successful. Returns empty response body
  /register:
    post:
      summary: Register user
      description: Register new user. The user submits their email address and an email wiil be sent to that address with a verification link.
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Verification email has been sent. Empty response.
        '400':
          description: Error registering user. Returns error object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/REGISTER_USER_ERROR'
  /verify-account/{token}:
    summary: Verify account
    description: Used for registerng a new account and for resetting password.
    get:
      summary: Verify account
      description: Fetches user associated with the token.
      operationId: getVerifyAccount
      parameters:
        - name: token
          in: path
          required: true
          description: Token recieved in the email link when registering an account.
      responses:
        '200':
          description: Returns object with username and if the user is new.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  isNewUser:
                    type: boolean
        '400':
          description: Bad request. Returns error object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GET_VERIFY_ACCOUNT_ERROR'
    post:
      summary: Verify Account
      description: Verify and create account or reset password if account already exists.
      operationId: postVerifyAccount
      parameters:
        - name: token
          in: path
          required: true
          description: Token recieved in the email link when registering an account.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  minLength: 6
                  maxLength: 20
      responses:
        '200':
          description: Account created successfully. User will also be logged in. Returns empty response with session cookie.
        '400':
          description: Bad request. Returns error object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/POST_VERIFY_ACCOUNT_ERROR'
  /operations:
    get:
      summary: Get operations
      description: Fetches all operations. Returns an array of unsorted operations.
      operationId: getOperations
      security:
        - cookieAuthentication: []
      responses:
        '200':
          description: Return an array of operations. Unsorted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OPERATION'
    post:
      summary: Add operation
      description: Add an operation
      operationId: addOperation
      security:
        - cookieAuthentication: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NEW_OPERATION'
      responses:
        '200':
          description: 'Returns the operation with an id'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OPERATION'
        '400':
          description: Bad request. Returns an object describing the error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ADD_OPERATION_ERROR'
  /operations/{operationId}:
    delete:
      summary: Delete operation
      description: Delete a single operation
      operationId: deleteOperation
      security:
        - cookieAuthentication: []
      parameters:
        - name: operationId
          in: path
          required: true
          description: The ID of the operation to be deleted
      responses:
        '200':
          description: Returns an empty response if sucessful
        '400':
          description: Bad request. Returns an object describing the error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DELETE_OPERATION_ERROR'
  /user:
    get:
      summary: Get user
      description: Fetches the authenticated user. Returns an object with the username
      operationId: getUser
      security:
        - cookieAuthentication: []
      responses:
        '200':
          description: Returns an object with the username.
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
    delete:
      summary: Delete user
      description: Deletes the user account and all relating data including operations for that user. The username is required in the request to prevent accidental removing of accounts.
      operationId: deleteUser
      security:
        - cookieAuthentication: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the authenticated user.
      responses:
        '200':
          description: Empty response if successful
        '400':
          description: Bad request. Returns an object describing the error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DELETE_USER_ERROR'
  /authenticated-state:
    get:
      summary: Authenticated state
      description: Fetches the authentication state for the user.
      operationId: getAuthenticatedState
      security:
        - cookieAuthentication: []
      responses:
        '200':
          description: If user is authenticated. Empty response.
        '401':
          description: If user is unauthenticated. Returns error object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ERROR'
components:
  securitySchemes:
    cookieAuthentication:
      type: apiKey
      in: cookie
      name: oplog.sid
  schemas:
    NEW_OPERATION:
      type: object
      required:
        - icd
        - date
        - mainOperator
      properties:
        icd:
          type: string
          description: One of Socialstyrelsens KVÃ…-koder from 2017.
        date:
          type: string
          format: date
          description: Only accepts format 'YYYY-MM-DD'. The time part is added on the server with the current UTC time.
        mainOperator:
          type: boolean
          description: Operator = true. Assistant = false.
    OPERATION:
      allOf:
        - required:
          - _id
          properties:
            _id:
              type: string
              description: Unique ID for the operation.
            date:
              type: string
              format: date-time
              description: 'Date in UTC timezone and formated according ISO 8601. Example: "2018-08-06T09:54:29.697Z"'
        - $ref: '#/components/schemas/NEW_OPERATION'
      example:
        _id: 5b681ad52de2491060977ed3
        icd: JAB30
        date: 2018-08-06T09:54:29.697Z,
        mainOperator: true
    ERROR:
      type: object
      properties:
        statusCode:
          type: integer
          description: HTTP status code.
        errorCode:
          type: string
          description: A string unique for the error type.
        message:
          type: string
          description: A message describing the error. This message is intended for dubugging and not end users.
    ADD_OPERATION_ERROR:
      allOf:
        - $ref: '#/components/schemas/ERROR'
        - properties:
            errorCode:
              type: string
              description: A unique string for the error type.
              enum:
                - InvalidJsonSyntax
                - InvalidOperationDate
                - InvalidOperationProperty
    DELETE_OPERATION_ERROR:
      allOf:
        - $ref: '#/components/schemas/ERROR'
        - properties:
            errorCode:
              type: string
              description: A unique string for the error type.
              enum:
                - InvalidJsonSyntax
                - InvalidOperationId
    DELETE_USER_ERROR:
      allOf:
        - $ref: '#/components/schemas/ERROR'
        - properties:
            errorCode:
              type: string
              description: A unique string for the error type.
              enum:
                - InvalidJsonSyntax
                - EmailRequired
    REGISTER_USER_ERROR:
      allOf:
        - $ref: '#/components/schemas/ERROR'
        - properties:
            errorCode:
              type: string
              description: A unique string for the error type.
              enum:
                - InvalidJsonSyntax
                - EmailSyntaxInvalid
                - EmailAlreadyInUse
                - EmailRequired
    GET_VERIFY_ACCOUNT_ERROR:
      allOf:
        - $ref: '#/components/schemas/ERROR'
        - properties:
            errorCode:
              type: string
              description: A unique string for the error type.
              enum:
                - InvalidRegistrationToken
    POST_VERIFY_ACCOUNT_ERROR:
      allOf:
        - $ref: '#/components/schemas/ERROR'
        - properties:
            errorCode:
              type: string
              description: A unique string for the error type.
              enum:
                - InvalidRegistrationToken
                - InvalidPasswordSyntax
